/* #################################################################### */
/* init  --  main Loops                                     */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "global_var.h"
#include "nrutil.h"


void init()
{ 
  int newMTs,ibox,iMT,N,i;
    /*If certain features are switched on all averaging calculations
     are useless*/
  int av_flag=1;
  float length,avMTlength;
  long it1,it2,idt,tau;

    /*Initialize av structure*/
    initialize_av_variables();

    
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
  /* Ensemble averaging loop */  
  for (iav=1; iav<=nav; iav++)
    {
        /////////////////////////////////////////////////////////////////
        newMTs=MTfirst; // number of initial MT same every loop
        /*Always reset the index counter to zero! So that at the beginning
         all indexes are "unused"*/
        emptyint(track.index_count,0, MXMTS);
        
        
        //If we take a diffusing + drifting motor dist into account get array of motor bound density
        //Subsequently fill this array with the initial dist
        dist_dyn=vector(1,nbox);
        dist_kin=vector(1,nbox);
        ProbBi_dist=vector(1,nbox);
        ProbKi_dist=vector(1,nbox);
        ProbDy_dist=vector(1,nbox);
        ProbAct_dist=vector(1,nbox);
        Initial_dist();

        /*Initialize iteration structure*/
        /*############################*/
        initialize_it_variables(newMTs);
        /*############################*/

        
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        //CORE LOOP////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////

      /* Start time loop -- trajectory */
      for (iter=1;iter<=niter;iter++)
	{
    
      

	  /* Generate MT array and calculate velocities */
        
        mkMTs(newMTs);  // MT array initialization
        

        overlapMap();  //get them overlaps
        
        if (MOTOR==TRUE) {
            prob_update();
        }
        /*If we also simulate actin we need to get an ovlp map for it*/
        if (ACTIN==TRUE) {
            actin_overlapMap();
        }
        
        percolation(); //searches for clusters and stores them in MT.cluster array whereas the 0 marks if the system is percolated or not

        equations();   //solve equations
       
        //wdata();       //write the data only debug

        update_av();   //update all tracking and av parameters
        
        newpos();// MOVE
        
      // The following function applies some potential which forces MTs to move closer to 0 in the yz plane
	  if (MCfreq>0)
	    if ((iter+MCfreq-1)%MCfreq==0) compact();
	  /* if ((iter+MCfreq-1)%MCfreq==0) compactx(); */
	  
	  /* Depending on input, control the entering
	     flux*/
	  if (FixedDensity)
	    {
            printf("FIXED DENS BROKEN!\n");
            exit(0);
	      length=MT.xmax_real-MT.xmin_real;
	      avMTlength=0.5*(MT.maxL+MT.minL);
	      N=(int)floor(0.5+NmaxMTs*(length+avMTlength)/avMTlength);
	      if (MT.number<N)
		newMTs=N-MT.number;
	      else
		newMTs=0;
	      printf("init:> iter=%d, length=%f N=%d MT.number=%d NmaxMTs=%d avMTlength=%f\n",iter,length,N,MT.number,NmaxMTs,avMTlength);
	      printf("init:> iter=%d, adding %d new MTs\n",iter,newMTs);getchar();
	    }
	  else
	    if ((iter+newfreq-1)%newfreq==0)
	      newMTs=newMTs0;
	    else
	      newMTs=0;
        

     
        
	}
        
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        ////////////////////////////////////////////////
        
        /*BEFORE doing the averaging calculations
         Check if the user wants to use the averaging
         iterations for a special plot. Returns 0 or 1*/
      av_flag=special_plots();
        
      /* calculate time correlation functions */
      /*if (av_flag){
          printf("\nCalculating time correlation functions\n");
          timecorr();
      }*/

      

      /* print MT trajectories */
      //if (iav==1) wav_xtraject();
      
    if (iav==1) {
            if (D3_output==TRUE) wav_traject_3Dmathematica();//mathematica animation output
            else wav_traject_2Dmathematica();
    }
    
        /*FREE all MT data*/
        free_MTdat();
        ////////////////////
        
      /*Only calculate averages if av_flag gives 1
       There are some features which interpret nav differently
       and therby render averaging useless*/
     if (av_flag){
            /*Normalize all averaged quantities (divide by iav)*/
            normalize();
            ///////////////////////////////////////
            
            /*for (iter=1;iter<=niter;iter++)
                if ((iter+wfreq-1)%wfreq==0) wav_density(iter);*/
            /*for (iter=neqsteps;iter<=niter;iter++)
             if ((iter+wfreq-1)%wfreq==0) wav_rdensity(iter);*/
         for (iter=1;iter<=niter;iter++){
             if ((iter+wfreq-1)%wfreq==0){
                 //wav_tubulin_op(iter);
                 //wav_motordens(iter);
             }
             
         }
             /*for (iter=1;iter<=niter;iter++)
             if ((iter+wfreq-1)%wfreq==0) wav_xvelprof(iter);*/
            /*for (iter=1;iter<=niter;iter++)
                if ((iter+wfreq-1)%wfreq==0) wav_absveldensity(iter);
            for (iter=1;iter<=niter;iter++)
                if ((iter+wfreq-1)%wfreq==0) wav_veldensity(iter);*/
            /*for (iter=1;iter<=niter;iter++)
                if ((iter+wfreq-1)%wfreq==0) wav_polarcor(iter);
            for (iter=1;iter<=niter;iter++)
                if ((iter+wfreq-1)%wfreq==0) wav_polarcor_ryz(iter);*/
               /* for (iter=1;iter<=niter;iter++)
                    if ((iter+wfreq-1)%wfreq==0) wav_velcor(iter);*/
            
            /*
            for (iter=corr_ti;iter<=corr_tf;iter++){
                if ((iter+wfreq-1)%wfreq==0) wav_timevelcor(iter);
                
            }*/
            wav_tubulin_dens();
            wav_end2end();
            //wav_x();
            //wav_x2();
            //wav_x2tau();
            //wav_Rg();
            //wav_V();
            //wav_V2();
            //wav_neighbors();
            //wav_ovlp();
            //wav_nMT();
            //wav_nzeros();
            //wav_totabsveldensity();
            //wav_totveldensity();
            //wav_RgYZ();
            //wav_OrderParam();
            
            /*Unnormalize all averaged quantities (multiply by iav)*/
            unnormalize();
        }
    ///////////////////////////////////////
      /*for (iter=1;iter<=niter;iter++)
	for (ibox=0;ibox<nbox;ibox++)
	av.polarcor[iter][ibox] =0.0;  */
        
       free_vector(sum.xl,0,niter);
       free_vector(sum.xl2,0,niter);
       free_vector(sum.xr,0,niter);
       free_vector(sum.xr2,0,niter);
       free_vector(sum.nl,0,niter);
       free_vector(sum.nr,0,niter);
    }
  
    /*Free averything for end*/
    free_all();
    ///////////////////////////
}

  


